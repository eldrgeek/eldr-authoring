{"version":3,"sources":["script.js"],"names":["consolidated","console","log","window","onload","el","document","querySelector","value","stackedit","Stackedit","openStackEdit","openFile","name","content","text","on","file","a","AudioContext","error","beep","vol","freq","duration","v","createOscillator","u","createGain","connect","frequency","type","destination","gain","start","currentTime","stop","SpeechRecognition","webkitSpeechRecognition","synth","speechSynthesis","status","setStatus","textContent","dictationRunning","startDictation","dictate","stopDictation","recognition","icon","addEventListener","grammar","SpeechGrammarList","webkitSpeechGrammarList","speechRecognitionList","addFromString","grammars","aggregate","lang","interimResults","continuous","maxAlternatives","onerror","e","onend","nextToScan","onresult","event","incremental","provisional","last","results","length","newSegment","i","transcript","isFinal","events","map"],"mappings":"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","file":"script.1b80cb59.map","sourceRoot":"..","sourcesContent":["/* If you're feeling fancy you can add interactivity \n    to your site with Javascript */\n\n// prints \"hi\" in the browser's dev tools console\n\n\n  // let el, stackedit, openStackEdit;\n  let consolidated;\n \n\n\n  console.log(\"script\")\n  window.onload = () => {\n    console.log(\"LOAD\")\n    let el = document.querySelector('textarea');\n    consolidated = el.value;\n    // console.log(el.value);\n    window.stackedit = new window.Stackedit();\n    window.openStackEdit = () =>{\n        console.log(\"PPE\")\n\n      // Open the iframe\n\n      window.stackedit.openFile({\n        name: 'Filename', // with an optional filename\n        content: {\n          text: el.value // and the Markdown content.\n        }\n      });\n      \n   }\n  // Listen to StackEdit events and apply the changes to the textarea.\n  window.stackedit.on('fileChange', (file) => {\n    el.value = file.content.text;\n  });\n  }\nconsole.log('the script');\nlet a=new AudioContext() // browsers limit the number of concurrent audio contexts, so you better re-use'em\nlet error = \"no error\"\nlet beep = (vol, freq, duration) => {\n  let v=a.createOscillator()\n  let u=a.createGain()\n  v.connect(u)\n  v.frequency.value=freq\n  v.type=\"square\"\n  u.connect(a.destination)\n  u.gain.value=vol*0.01\n  v.start(a.currentTime)\n  v.stop(a.currentTime+duration*0.001)\n} \n\n// beep(10, 520, 200)\n\nconst SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;\nconst synth = window.speechSynthesis;\n\nlet status = document.querySelector('#status')\n\nconst setStatus = (text) => {\n  status.textContent = text;\n}\nsetStatus(\"ready\");\n\nlet dictationRunning = false;\nconst startDictation = () => {\n  console.log(\"start dictation\");\n  dictationRunning = true;\n  dictate()\n}\nconst stopDictation = () => {\n  console.log(\"stop dictation\");\n  dictationRunning = false;\n  recognition.stop()\n}\n\n\n\nconst icon = document.querySelector('i.fa.fa-microphone')\nicon.addEventListener('click', () => {\n  // sound.play();\\\n  console.log(\"listeningf\")\n  dictate();\n});\n\nvar grammar = '#JSGF V1.0; grammar colors; public <color> = aqua | azure | beige | bisque | black | blue | brown | chocolate | coral | crimson | cyan | fuchsia | ghostwhite | gold | goldenrod | gray | green | indigo | ivory | khaki | lavender | lime | linen | magenta | maroon | moccasin | navy | olive | orange | orchid | peru | pink | plum | purple | red | salmon | sienna | silver | snow | tan | teal | thistle | tomato | turquoise | violet | white | yellow ;'\nlet SpeechGrammarList = window.SpeechGrammarList || window.webkitSpeechGrammarList;\nvar speechRecognitionList = new SpeechGrammarList();\nspeechRecognitionList.addFromString(grammar, 1);\nconst recognition = new SpeechRecognition();\nrecognition.grammars = speechRecognitionList;\n\nconst dictate = () => {\n  console.log(\"dictation started\");\n  let aggregate = \"\"\n  recognition.lang = 'en-US';\n  recognition.interimResults = true;\n  recognition.continuous = false;\n  recognition.maxAlternatives = 3;  \n  // recognition.grammars = speechRecognitionList;\n  recognition.start();\n\n  setStatus(\"listening\");\n\n  recognition.onerror = (e) => {\n    setStatus(\"error \" + e.error)\n    error = e;\n  }\n  recognition.onend = () => {\n    console.log(\"end\")\n    setStatus(\"end \" + error.error)\n    if(dictationRunning){\n      startDictation()\n    }\n  }\n  let nextToScan = 0\n  recognition.onresult = (event) => {\n    // console.log(event)\n    let incremental = \"\"\n    let provisional = \"\"\n    let last = event.results.length;\n    let newSegment = \"\"\n    for(let i = nextToScan; i < last; i++) {\n      newSegment = event.results[i][0].transcript;\n      incremental += newSegment;\n\n      if(!event.results[i].isFinal) {\n        provisional += newSegment;\n        // recognition.stop()\n        // speak(newSegment);\n      } else {\n        provisional = \"\";\n        console.log(newSegment)\n        beep(10, 520, 200)\n        consolidated += newSegment;\n        nextToScan = i + 1;\n      }\n    }\n    el.value = consolidated + provisional;\n  }\n}\nlet events = [\"audiostart\",\"soundstart\",\"speechstart\",\"speechend\",\"soundend\",\"audioend\",\"nomatch\", \"error\", \"start\",\"end\"];\nevents.map((name)=> recognition[\"on\"+ name] = () => console.log(\"recognition \" + name ))\n\n\n"]}